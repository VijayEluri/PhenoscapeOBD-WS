<?xml version="1.0"?>
<!-- ====================================================================== 
     ant build file
     ====================================================================== -->
<project name="OBD-WS" default="compile" basedir=".">
    <description>OBD web services ant build</description>
    <property name="src" value="src"/>
    <property name="test" value="test"/>
    <property name="classfiles" value="build/classes"/>
    <property name="webroot" value="WebContent"/>
    <property name="weblib" value="${webroot}/WEB-INF/lib"/>
    <property name="lib" value="lib"/>
    <property name="warfile" value="OBD-WS.war"/>
    <tstamp>
        <format property="NOW" pattern="yyyy-MM-dd_HH:mm:ss"/>
    </tstamp>
    <property name="build_date" value="${NOW}"/>
    
    <!-- The init target makes sure that the prerequisite directories exist. -->
    <target name="init">
        <mkdir dir="${classfiles}"/>
    </target>
	
    <!-- OBO dependency information - these targets are for developers
         to use to update jars coming from other OBO projects - not
         well tested yet
    -->
    <property name="bbop_dest" location="../BBOP"/>
    <property name="obo_dest" location="../OBO"/>
    <property name="obdapi_dest" location="../OBDAPI"/>
    <property name="obovocab_dest" location="../obo-vocab-java"/>
    <property name="oboedit_dest" location="../OBO-Edit2"/>
    
    <target name="buildbbop" if="bbop_dest">
        <ant dir="${bbop_dest}" target="jar" inheritAll="false"/>
        <copy file="${bbop_dest}/bbop.jar" todir="${lib}"/>
    </target>
    <target name="buildobo" if="obo_dest">
        <ant dir="${obo_dest}" target="jar" inheritAll="false"/>
        <copy file="${obo_dest}/obo.jar" todir="${lib}"/>
    </target>
    <target name="buildobovocab" if="obovocab_dest">
            <ant dir="${obovocab_dest}" target="jar" inheritAll="false"/>
            <copy file="${obovocab_dest}/obo-vocab.jar" todir="${lib}"/>
        </target>
    <target name="buildobdapi" if="obdapi_dest">
        <ant dir="${obdapi_dest}" target="jar" inheritAll="false"/>
        <copy file="${obdapi_dest}/lib/runlibs/obdapi.jar" todir="${lib}"/>
    </target>
    <target name="buildoboedit" if="oboedit_dest">
            <ant dir="${oboedit_dest}" target="jar" inheritAll="false"/>
            <copy file="${oboedit_dest}/runtime/oboedit.jar" todir="${lib}"/>
    </target>
    <target name="library_jars" depends="buildbbop, buildobo, buildobovocab, buildobdapi, buildoboedit">
    </target>
    
    <path id="project.classpath">
        <fileset dir="${weblib}">
            <include name="*"/>
        </fileset>
        <fileset dir="${lib}">
            <include name="*"/>
        </fileset>
    </path>
    
<!-- The compile target runs javac on all the java files, and saves them into  the classfiles directory  -->
    <target name="compile" depends="init" 
            description="compiles all the java files">
        <javac srcdir="${src}" destdir="${classfiles}" 
               debug="yes"
               deprecation="yes">
            <classpath refid="project.classpath"/>
        </javac>
    </target>
    
    <target name="build-test" depends="compile">
        <javac srcdir="${test}" destdir="${classfiles}" 
               debug="yes"
               deprecation="yes">
            <classpath refid="project.classpath"/>
        </javac>
    </target>
    
    <!-- terse FAIL or PASS -->
    <target name="test" depends="build-test" 
            description="Run unit tests, report fail/pass statistics">
        <junit fork="yes" printsummary="on" maxmemory="1024m">
            <classpath>
                <pathelement path="."/>
                <pathelement path="${classfiles}"/>
                <path refid="project.classpath"/>
            </classpath>
            <batchtest>
                <fileset dir="${test}"/>
            </batchtest>
        </junit>
    </target>
    
<!-- prints to stdout all messages -->
    <target name="verbose-test" depends="build-test" 
            description="Unit tests with messages going to stdout">
        <junit fork="yes" printsummary="withOutAndErr" maxmemory="1024m">
            <classpath>
                <pathelement path="."/>
                <pathelement path="${classfiles}"/>
                <path refid="project.classpath"/>
            </classpath>
            <batchtest>
                <fileset dir="${test}"/>
            </batchtest>
        </junit>
    </target>
    
<!-- set var junit.test.class.name from cmd line for example: ant runatest -Djunit.test.class.name="org.phenoscape.io.NEXUSReaderTest"-->
    <target name="runatest" depends="build-test">
        <junit fork="yes" printsummary="withOutAndErr" maxmemory="1024m" showoutput="true">
            <classpath>
                <pathelement path="."/>
                <pathelement path="${classfiles}"/>
                <pathelement refid="project.classpath"/>
            </classpath>
            <test name="${junit.test.class.name}"/>
        </junit>
    </target>
    
    <!-- The clean target just erases the classes -->
    <target name="clean">
        <delete dir="${classfiles}"/>
        <delete file="${warfile}"/>
    </target>
    
    <!-- clean and compile everything -->
    <target name="build-all" depends="clean,compile,build-test"/>
    
    <!-- clean and build the war -->
    <target name="rebuild" depends="clean,war" 
            description="Recompile and recreate war file"/>
    
    <target name="war" depends="compile"
            description="compile everything, build war file">
        <war destfile="${warfile}" 
             webxml="${webroot}/WEB-INF/web.xml">
            <classes dir="${classfiles}"/>
            <!-- user should have a file called "connectionInfo.properties" in 
                 the org.obd.ws.application package with the following properties:
                 dbHost=jdbc:postgresql://host/db_name
                 uid=db_username
                 pwd=db_password
            -->
            <classes dir="${src}" 
                     includes="org/obd/ws/application/*.properties"/>
            <lib dir="${weblib}" />
        </war>
    </target>
    
</project>
